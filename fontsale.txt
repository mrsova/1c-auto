

//******************РАЗДЕЛ РАБОТА С API FAPI*******************************


//********************СЕРВЕР********************************
 //Комментарий от 11.11.201
//Получение данных с сервера
//Возвращает: при успехе - JSON (Строка), при ошибках - Неопределено
Функция ПолучитьДанныеССервера(ULR)
	
	КлючДоступа = "6c4a4367-c7b0-4263-ae20-0038273ab2e7";
	ULR = ULR + "&ui=" + КлючДоступа;
	
	Попытка				
		HTTPСоединение = Новый HTTPСоединение("fapi.iisis.ru");		
		
		HTTPОтвет      = HTTPСоединение.Получить(Новый HTTPЗапрос(ULR));
		
		Если НЕ HTTPОтвет.КодСостояния = 200 Тогда  
			Сообщить("Ошибка доступа к серверу");
			Возврат Неопределено; 
		КонецЕсли;
		
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Неопределено;		
КонецФункции

//Подключается к API и получает данные в формате BeanAnalogList
Функция GetAnalogListV2(n)
	
	AnalogListV2 = GetBeanAnalogListV2();
	
	Попытка		
		ЧтениеJSON = Новый ЧтениеJSON;
		ДанныеКакСтрока = ПолучитьДанныеССервера("/fapi/v2/analogList?n=" + n);
		ЧтениеJSON.УстановитьСтроку(ДанныеКакСтрока);			
		
		ТекущаяТаблица = Неопределено;
		Пока ЧтениеJSON.Прочитать() Цикл
			
			Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И AnalogListV2.Свойство(ЧтениеJSON.ТекущееЗначение) Тогда
				ТекущаяТаблица = AnalogListV2[ЧтениеJSON.ТекущееЗначение];
			КонецЕсли;
			
			Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
				Пока ЧтениеJSON.Прочитать() Цикл
					Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						СтрокаТаблицы = ТекущаяТаблица.Добавить();
						Пока ЧтениеJSON.Прочитать() Цикл
							Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда Прервать; КонецЕсли;
							
							key_ = ЧтениеJSON.ТекущееЗначение;
							ЧтениеJSON.Прочитать();
							СтрокаТаблицы[key_] = ЧтениеJSON.ТекущееЗначение;
						КонецЦикла;
					КонецЕсли;
					Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда Прервать; КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеJSON.Закрыть();
		
	Исключение		
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат AnalogListV2;	
	
КонецФункции

//Формирует структуру, оптимизированную для дальнейшей работы с полученными данными
//Возвращает: BeanAnalogList (Структура)
Функция GetBeanAnalogListV2()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	//ManufacturerList
	mfl = Новый ТаблицаЗначений;
	mfl.Колонки.Добавить("i", ТипЧисло);
	mfl.Колонки.Добавить("ui", ТипСтрока);
	mfl.Колонки.Добавить("ds", ТипСтрока);
	mfl.Колонки.Добавить("da", ТипСтрока);
	
	//ProductList
	pl = Новый ТаблицаЗначений;
	pl.Колонки.Добавить("i", ТипЧисло);
	pl.Колонки.Добавить("ui", ТипСтрока);
	pl.Колонки.Добавить("mfi", ТипЧисло);
	pl.Колонки.Добавить("di", ТипЧисло);
	pl.Колонки.Добавить("ns", ТипСтрока);
	pl.Колонки.Добавить("n", ТипСтрока);
	pl.Колонки.Добавить("d", ТипСтрока);
	pl.Колонки.Добавить("tp", ТипЧисло);
	pl.Колонки.Добавить("sts", ТипЧисло);		
	
	//AnalogList    Товар(артикул,бренд) Аналог
	al = Новый ТаблицаЗначений;
	al.Колонки.Добавить("i", ТипЧисло);
	al.Колонки.Добавить("ui", ТипСтрока);
	al.Колонки.Добавить("pri", ТипЧисло);
	al.Колонки.Добавить("si", ТипЧисло);
	al.Колонки.Добавить("di", ТипЧисло);
	al.Колонки.Добавить("pi", ТипЧисло);
	al.Колонки.Добавить("mfi", ТипЧисло);
	al.Колонки.Добавить("mfa", ТипСтрока);
	al.Колонки.Добавить("ns", ТипСтрока);
	al.Колонки.Добавить("pai", ТипЧисло);
	al.Колонки.Добавить("mfai", ТипЧисло);
	al.Колонки.Добавить("mfaa", ТипСтрока);
	al.Колонки.Добавить("nsa", ТипСтрока);
	al.Колонки.Добавить("int", ТипЧисло);
	al.Колонки.Добавить("rm", ТипЧисло);
	al.Колонки.Добавить("rp", ТипЧисло);
	al.Колонки.Добавить("_int", ТипЧисло);
	
	//SourceList
	sl = Новый ТаблицаЗначений;
	sl.Колонки.Добавить("i", ТипЧисло);
	sl.Колонки.Добавить("d", ТипСтрока);
	sl.Колонки.Добавить("r", ТипЧисло);
	
	//MessageList
	ml = Новый ТаблицаЗначений;
	ml.Колонки.Добавить("i", ТипЧисло);
	ml.Колонки.Добавить("l", ТипЧисло);
	ml.Колонки.Добавить("d", ТипСтрока);
	
	
	//PriceProductList
	pp = Новый ТаблицаЗначений;
	pp.Колонки.Добавить("i", ТипЧисло);
	pp.Колонки.Добавить("ui", ТипСтрока); //UUID - Уникальный идентификатор
	pp.Колонки.Добавить("pi", ТипЧисло);
	pp.Колонки.Добавить("mfi", ТипЧисло);
	pp.Колонки.Добавить("si", ТипЧисло);
	pp.Колонки.Добавить("mfd", ТипЧисло);
	pp.Колонки.Добавить("d", ТипСтрока);
	pp.Колонки.Добавить("n", ТипЧисло);
	pp.Колонки.Добавить("u", ТипСтрока);
	pp.Колонки.Добавить("c", ТипСтрока);
	pp.Колонки.Добавить("upd", Новый ОписаниеТипов("Дата"));
	pp.Колонки.Добавить("o", ТипЧисло);
	pp.Колонки.Добавить("pr", ТипСтрока);
	pp.Колонки.Добавить("prui", ТипЧисло);
	pp.Колонки.Добавить("uri", ТипСтрока);
	pp.Колонки.Добавить("q", ТипЧисло);
	pp.Колонки.Добавить("p", ТипЧисло);
	pp.Колонки.Добавить("p1", ТипЧисло);
	pp.Колонки.Добавить("p2", ТипЧисло);
	pp.Колонки.Добавить("p3", ТипЧисло);
	pp.Колонки.Добавить("p4", ТипЧисло);
	pp.Колонки.Добавить("p5", ТипЧисло);
	pp.Колонки.Добавить("cr", ТипСтрока);
	pp.Колонки.Добавить("dp", ТипСтрока);
	pp.Колонки.Добавить("mo", ТипСтрока);
	
	Возврат Новый Структура("ManufacturerList, ProductList, AnalogList, SourceList, MessageList, PriceProductList", mfl, pl, al, sl, ml, pp);
	
КонецФункции

Функция ПолучитьПрайсЛист(Номер)
	AnalogList = GetAnalogListV2(Номер);
	
	//МассивНомеров = Новый Массив;
	МассивНомеров = Новый Массив;
	Для Каждого Строка Из  AnalogList.ProductList Цикл
		Если МассивНомеров.Найти(Строка.ns) = Неопределено Тогда
			МассивНомеров.Добавить(Строка.ns);
		КонецЕсли;
	КонецЦикла;
	//ProductList = AnalogList.ProductList;
	//NSИзТаблицыProductList = Новый Массив;
	МассивNSИзТаблицыProductList =  AnalogList.ProductList.ВыгрузитьКолонку("ns");
	МассивНомеров = AnalogList.ProductList.ВыгрузитьКолонку("mfi");
	//МассивNSИзТаблицыProductList= ProductList.p.ВыгрузитьКолонку("ns");
	Запрос = Новый Запрос;
	
	//Запрос.Текст = "ВЫБРАТЬ Ссылка,Ссылка.Наименование, Количество, Цена, Ссылка.ЕдиницаХраненияОстатков, Артикул,Родитель ИЗ ОстаткиТоваровНаСкладе.Остатки ГДЕ Артикул В(&МассивНомеров)";
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура.Ссылка КАК Ссылка,
	|	ТоварыНаСкладахОстатки.Номенклатура.Родитель КАК Родитель,
	|	ТоварыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
	|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыНаСкладахОстатки.Склад.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК Наименование,
	|	ТоварыНаСкладахОстатки.Номенклатура.Комментарий КАК Комментарий,
	|	ТоварыНаСкладахОстатки.Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.Номенклатура.Артикул В(&МассивNSИзТаблицыProductList)";
	
	
	Запрос.УстановитьПараметр("МассивNSИзТаблицыProductList", МассивNSИзТаблицыProductList);
	
	//Выборка = Запрос.Выполнить().Выбрать();
	РезультатЗапроса = Запрос.Выполнить(); /// На этом моменте еще видны результаты запроса: коллекцииКолонокРезультатаЗапроса, а дальше уже нет.  
	//	мм = РезультатЗапроса.Колонки;
	Выборка = РезультатЗапроса.Выбрать(); // здесь колонки еще определяются, но ошибка чтения "Значения"
	ОтборПоПродуктам = Новый Структура("ns, mfi");
	i = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//TODO сообщение пользователю, если у него в базе в поле артикул номера полные, а не сокращенные, то данные позиции в поиск не попадут.
		Номер = Выборка.Артикул; //1 - w753  2 - w75/3;
		АдаптированныйБренд = ManufacturerAdaptGet(Выборка.Родитель);//MANN-FILTER mann filter -> MANNFILTER
		
		ManufacturerListRow = AnalogList.ManufacturerList.Найти(АдаптированныйБренд, "da");
		Если ManufacturerListRow = Неопределено Тогда Продолжить; КонецЕсли;
		//
		//
		ОтборПоПродуктам.mfi = ManufacturerListRow.i;
		ОтборПоПродуктам.ns = Номер;
		//ОтборПоПродуктам.i =
		ProductListRows = AnalogList.ProductList.НайтиСтроки(ОтборПоПродуктам); // ProductListRow
		Если ProductListRows.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		
		ProductListRow = ProductListRows[0];
				
		//--- конец добавленного  2.11.2017 г.
		//Если ProductListRow = Неопределено Тогда Продолжить; КонецЕсли;
		
		PriceProductListRow = AnalogList.PriceProductList.Добавить();	
		PriceProductListRow.i 	= i;
		PriceProductListRow.ui	= XmlСтрока(Выборка.Ссылка); //UUID(00000000-0000-0000-0000-000000000000) - Уникальный идентификатор
		PriceProductListRow.pi	= ProductListRow.i;
		PriceProductListRow.mfi	= ProductListRow.mfi;
		PriceProductListRow.si= Выборка;
		PriceProductListRow.mfd=Выборка.Родитель;
		PriceProductListRow.d=Выборка.Наименование;
		PriceProductListRow.n=Выборка.Артикул;
		PriceProductListRow.u=Выборка.ЕдиницаХраненияОстатков;
		PriceProductListRow.c= Выборка.Комментарий;
		//PriceProductListRow.upd=Выборка;
		//PriceProductListRow.o=Выборка;
		//PriceProductListRow.pr=Выборка;
		//PriceProductListRow.prui=Выборка;
		//PriceProductListRow.uri=Выборка;
		PriceProductListRow.q=Выборка.Количество;
		//PriceProductListRow.p= Выборка.Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, , Склад.ТипЦенРозничнойТорговли, Дата, ЕдиницаИзмерения, Валюта, Курс, Кратность, ПроцентСкидкиНаценки, ДоговорКонтрагента, УсловиеПродаж);
		//PriceProductListRow.p= Выборка.Ценообразование.ПолучитьЦенуПоТипуЦен(СсылкаНаНоменклатуру,)
		РозницаЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, , Выборка.ТипЦенРозничнойТорговли, ТекущаяДата());
		
			                             
		PriceProductListRow.p= РозницаЦена;
		//PriceProductListRow.p1=Выборка;
		//PriceProductListRow.p2=Выборка;
		//PriceProductListRow.p3=Выборка;
		//PriceProductListRow.p4=Выборка;
		//PriceProductListRow.p5=Выборка;
		//PriceProductListRow.cr=Выборка;
		//PriceProductListRow.dp=Выборка;
		//PriceProductListRow.mo=Выборка;
		
		i = i + 1;
	КонецЦикла;
	
	Возврат AnalogList;	
КонецФункции


//********************ОБЩЕЕ********************************
//Получение стандартизированного номера по спецификации RFC 23667
//Параметры:  1. Number(Строка - полный номер запчасти со спец. символами
//Возвращает: NumberStandart(Строка) - сокращенный номер запчасти без спец. символов
Function NumberStandartGet(Number) 
	
	СurrentNumber = Lower(Number);
	
	StrLen = StrLen(СurrentNumber);
	
	NumberStandart = "";
	
	Для Stat = 1 По StrLen Цикл
		Symbol  = Mid(СurrentNumber, Stat, 1);	
		CharCode = CharCode(Symbol);
		
		//английские с 97 по 122 | русские с 1072 по 1103 | цифры с 48 по 57
		
		If (CharCode >= 97 And CharCode <= 122) Or 
			(CharCode >= 48 And CharCode <= 57) Or
			(CharCode >= 1072 And CharCode <= 1103)			Then
			NumberStandart = NumberStandart+String(Symbol);
		EndIf;
	КонецЦикла;
	
	Return NumberStandart;
	
EndFunction

Function ManufacturerAdaptGet(mf)
	Return ВРег(NumberStandartGet(mf));
EndFunction


//********************КЛИЕНТ********************************

Процедура textBoxSearchПриИзменении(Элемент)
	
	Номер = NumberStandartGet(Элемент.Значение);
	Если ПустаяСтрока(Номер) Тогда 
		Сообщить("Не указан номер детали");
		Возврат;
	КонецЕсли;
	
	ПрайсЛист = ПолучитьПрайсЛист(Номер);
	
	ProductListRows = ПрайсЛист.ProductList.НайтиСтроки(Новый Структура("ns", Номер));  
	
	Макет = ПолучитьМакет("Макет_гл");
	ТабДок = ЭлементыФормы.SpreadsheetDocumentField;
	
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	//макет---
	//ОбластьДетальныхЗаписей.Параметры.Артикул = "asfasfas";
	//ТабДок.Вывести(ОбластьДетальныхЗаписей);
	ProductListRows = ПрайсЛист.ProductList.НайтиСтроки(Новый Структура("ns", Номер)); 
	n=0;
Для Каждого Row Из ProductListRows Цикл
		
		//1-й уровень группировки в отчете
		PriceProductListRows = ПрайсЛист.PriceProductList.НайтиСтроки(Новый Структура("pi", Row.i));
		 
		Для Каждого PriceProductListRow Из PriceProductListRows Цикл  
			 ManufactureListRow = ПрайсЛист.ManufacturerList.НайтиСтроки(Новый Структура("i", PriceProductListRow.mfi));
             ОбластьДетальныхЗаписей.Параметры.Наименование = ManufactureListRow[0]["ds"];
	         ОбластьДетальныхЗаписей.Параметры.Артикул = PriceProductListRow.n;
			 ОбластьДетальныхЗаписей.Параметры.Ссылка = PriceProductListRow.ui;	
			  ///Исправить на ТабличныйДокумент.Вывести(ОбластьДеталь, 1);
     		 ТабДок.Вывести(ОбластьДетальныхЗаписей,1);
		КонецЦикла;  	     		
		
		//2-й уровень группировки в отчете
//		 AnalogListRows = ПрайсЛист.AnalogList.НайтиСтроки(Новый Структура("pi", Row.i));
		 
//		 Для Каждого AnalogListRow Из AnalogListRows Цикл
//			 PriceProductListRows2 = ПрайсЛист.PriceProductList.НайтиСтроки(Новый Структура("pi", AnalogListRow.pai));
//			 Для Каждого PriceProductListRow2 Из PriceProductListRows2 Цикл
//				 ТабДок.Вывести(ОбластьДетальныхЗаписей, 2); ///Исправить на ТабличныйДокумент!!!  ТабДок.Вывести(ОбластьДеталь, 2);
//				 
//			КонецЦикла;
			 
//		КонецЦикла;

КонецЦикла;


	
	
	//
	//ProductList.Очистить();
	//Если Данные = Неопределено Тогда  Возврат; КонецЕсли;
	//	
	//ProductListRows = Данные.ProductList.НайтиСтроки(Новый Структура("ns", Номер)); 
	//Для Каждого Row Из ProductListRows Цикл
	//	ProductListRow = ProductList.Добавить();
	//	ProductListRow.mf = Данные.ManufacturerList[Row.mfi].ds;
	//	ProductListRow.n = Row.n;
	//	ProductListRow.i = Row.i;
	//КонецЦикла;
	
КонецПроцедуры

Процедура SpreadsheetDocumentFieldВыбор(Элемент, Область, СтандартнаяОбработка)
//	Сообщить("вася");
КонецПроцедуры
